/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Allies = {
  _id: string;
  _type: "allies";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: number;
  logos?: Array<{
    nombre?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _key: string;
  }>;
};

export type Report = {
  _id: string;
  _type: "report";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    img?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    shadow?: Color;
  };
  title?: string;
  pdf?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type Community = {
  _id: string;
  _type: "community";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  color?: Color;
};

export type Intervention = {
  _id: string;
  _type: "intervention";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  peopleAttendance?: number;
  buttonText?: string;
  communitiesAttended?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "community";
  }>;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  buttonText?: string;
  buttonUrl?: string;
  sponsors?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Intro = {
  _id: string;
  _type: "intro";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  mission?: {
    title?: string;
    description?: string;
    description2?: string;
  };
  button?: {
    text?: string;
    url?: string;
  };
};

export type Stats = {
  _id: string;
  _type: "stats";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: number;
  totalPeople?: number;
  womenAttended?: number;
  menAttended?: number;
  communitiesAttended?: Array<{
    name?: string;
    color?: Color;
    _key: string;
  }>;
  separator?: {
    symbol?: string;
    color?: Color;
  };
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Allies | Report | Community | Intervention | Event | BlockContent | Intro | Stats | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./data/allies.ts
// Variable: QUERY_ALL_ALLIES
// Query: *[_type == "allies"]{          year,          logos[]{            _key, nombre,            image{              asset->{                url              }            }          },      }
export type QUERY_ALL_ALLIESResult = Array<{
  year: number | null;
  logos: Array<{
    _key: string;
    nombre: string | null;
    image: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  }> | null;
}>;
// Variable: QUERY_LAST_ALLIE
// Query: *[_type == "allies"]{          logos[]{            _key, nombre,            image{              asset->{                url              }            }          },      } | order(year desc)[0]
export type QUERY_LAST_ALLIEResult = {
  logos: Array<{
    _key: string;
    nombre: string | null;
    image: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  }> | null;
} | null;

// Source: ./data/events.ts
// Variable: ALL_EVENTS_QUERY
// Query: *[_type == "event"] | order(name asc)
export type ALL_EVENTS_QUERYResult = Array<{
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  buttonText?: string;
  buttonUrl?: string;
  sponsors?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
}>;
// Variable: EVENT_CAROUSEL_QUERY
// Query: *[_type == "event"]{_id,slug,image,name} | order(name asc)
export type EVENT_CAROUSEL_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  name: string | null;
}>;
// Variable: EVENT_BY_SLUG_QUERY
// Query: *[_type == "event" && slug.current == $slug][0]
export type EVENT_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  buttonText?: string;
  buttonUrl?: string;
  sponsors?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
} | null;
// Variable: EVENTS_FOR_NAV_QUERY
// Query: *[_type == "event"]{_id,slug,name} | order(name asc)
export type EVENTS_FOR_NAV_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  name: string | null;
}>;

// Source: ./data/intervention.ts
// Variable: ALL_INTERVENTIONS_QUERY
// Query: *[_type == "intervention" && slug.current == $slug]{      ...,        communitiesAttended[]->{          name,          color{hex}        }      } | order(name asc)[0]
export type ALL_INTERVENTIONS_QUERYResult = {
  _id: string;
  _type: "intervention";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  peopleAttendance?: number;
  buttonText?: string;
  communitiesAttended: Array<{
    name: string | null;
    color: {
      hex: string | null;
    } | null;
  }> | null;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
} | null;

// Source: ./data/intro.ts
// Variable: INTRO_DATA
// Query: *[_type == "intro"] | order(name asc)[0]
export type INTRO_DATAResult = {
  _id: string;
  _type: "intro";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  mission?: {
    title?: string;
    description?: string;
    description2?: string;
  };
  button?: {
    text?: string;
    url?: string;
  };
} | null;

// Source: ./data/reports.ts
// Variable: ALL_REPORTS_QUERY
// Query: *[_type == "report"]{        _id, title,            pdf{              asset->{                url              }            },            image{              img{                asset->{                  url                }              },              shadow{                hex              }            }      } | order(title desc)
export type ALL_REPORTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  pdf: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  image: {
    img: {
      asset: {
        url: string | null;
      } | null;
    } | null;
    shadow: {
      hex: string | null;
    } | null;
  } | null;
}>;

// Source: ./data/stats.ts
// Variable: STATS_DATA
// Query: *[_type == "stats"] | order(name asc)[0]
export type STATS_DATAResult = {
  _id: string;
  _type: "stats";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: number;
  totalPeople?: number;
  womenAttended?: number;
  menAttended?: number;
  communitiesAttended?: Array<{
    name?: string;
    color?: Color;
    _key: string;
  }>;
  separator?: {
    symbol?: string;
    color?: Color;
  };
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"allies\"]{\n          year,\n          logos[]{\n            _key, nombre,\n            image{\n              asset->{\n                url\n              }\n            }\n          },\n      }": QUERY_ALL_ALLIESResult;
    "\n      *[_type == \"allies\"]{\n          logos[]{\n            _key, nombre,\n            image{\n              asset->{\n                url\n              }\n            }\n          },\n      } | order(year desc)[0]\n      ": QUERY_LAST_ALLIEResult;
    "*[_type == \"event\"] | order(name asc)": ALL_EVENTS_QUERYResult;
    "*[_type == \"event\"]{_id,slug,image,name} | order(name asc)": EVENT_CAROUSEL_QUERYResult;
    "*[_type == \"event\" && slug.current == $slug][0]": EVENT_BY_SLUG_QUERYResult;
    "*[_type == \"event\"]{_id,slug,name} | order(name asc)": EVENTS_FOR_NAV_QUERYResult;
    "*[_type == \"intervention\" && slug.current == $slug]{\n      ...,\n        communitiesAttended[]->{\n          name,\n          color{hex}\n        }\n      } | order(name asc)[0]": ALL_INTERVENTIONS_QUERYResult;
    "*[_type == \"intro\"] | order(name asc)[0]": INTRO_DATAResult;
    "*[_type == \"report\"]{\n        _id, title,\n            pdf{\n              asset->{\n                url\n              }\n            },\n            image{\n              img{\n                asset->{\n                  url\n                }\n              },\n              shadow{\n                hex\n              }\n            }\n      } | order(title desc)": ALL_REPORTS_QUERYResult;
    "*[_type == \"stats\"] | order(name asc)[0]": STATS_DATAResult;
  }
}
